<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"  xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入  将 Controller 排除-->
	<context:component-scan base-package="com.fuqin">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<context:property-placeholder location="classpath:db.properties"/>
	
	 <!--  数据源配置 --> 
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close"> 
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="filters" value="stat,wall" />
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" />
		
		<!-- 超过时间限制是否回收 -->  
		<property name="removeAbandoned" value="true" />  
		<!-- 超时时间；单位为秒。240秒=3分钟 -->  
		<property name="removeAbandonedTimeout" value="240" />  
	</bean>
	
	<!-- 事务相关 -->
	<!-- 事务管理start -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<!-- 使用annotation 定义 注解事务 优先 使用注解事务 order="0" -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="0" />
	<!-- 用注解来实现事务管理 -->
	
	<!-- 以AspectJ方式 定义 AOP 用于事务拦截 -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.fuqin.service.*.*(..))" advice-ref="txAdvice" order="1"/>
	</aop:config>
	<!-- 基本事务定义,使用transactionManager作事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />	
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception,RuntimeException"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<!-- 事务管理 end -->  	
	
	
	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations">
			 <list>
			  	<value>classpath:com/fuqin/mapper/*Mapper.xml</value>
			 </list>
		</property> 
	</bean>
	
	<!-- 扫描mapper.java  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">   
	    <property name="basePackage" value="com.fuqin.dao" />
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	
	
</beans>